title: C 函数
author:
  name: LI YANG
  url: http://mooc1.chaoxing.com/course/88110757.html
output: 07-C-function.html

# C 指针与函数
## Pointer and Function


--

### C 传递指针给函数

C 语言允许您传递指针给函数，只需要简单地声明函数参数为指针类型即可。 下面的实例中，我们传递一个无符号的 `long` 型指针给函数，并在函数内改变这个值：
```c
#include <stdio.h>
#include <time.h>
void getSeconds(unsigned long *par);
int main ()
{
   unsigned long sec;
   getSeconds( &sec );
   /* 输出实际值 */
   printf("Number of seconds: %ld\n", sec );
   return 0;
}

void getSeconds(unsigned long *par)
{
   /* 获取当前的秒数 */
   *par = time( NULL );
   return;
}

//它会产生下列结果：
Number of seconds :1294450468
```

能接受指针作为参数的函数，也能接受数组作为参数，如下所示：
```c
#include <stdio.h>
/* 函数声明 */
double getAverage(int *arr, int size);
int main ()
{
   /* 带有 5 个元素的整型数组  */
   int balance[5] = {1000, 2, 3, 17, 50};
   double avg;
   /* 传递一个指向数组的指针作为参数 */
   avg = getAverage( balance, 5 ) ;
   /* 输出返回值  */
   printf("Average value is: %f\n", avg );
   return 0;
}

double getAverage(int *arr, int size)
{
  int    i, sum = 0;       
  double avg;          
  for (i = 0; i < size; ++i)
  {
    sum += arr[i];
  }
  avg = (double)sum / size;
  return avg;
}

//它会产生下列结果：
Average value is: 214.40000
```

--

### C 从函数返回指针

C 允许您从函数返回指针。为了做到这点，您必须声明一个返回指针的函数，如下所示：
```c
int * myFunction()
{
...
}
```
另外，C 不支持在函数外返回局部变量的地址，除非定义局部变量为 `static` 变量。 现在，让我们来看下面的函数，它会生成 10个随机数，并使用表示指针的数组名（即第一个数组元素的地址）来返回它们，具体如下：
```c
#include <stdio.h>
#include <time.h>
#include <stdlib.h> 
/* 要生成和返回随机数的函数 */
int * getRandom( )
{
   static int  r[10];
   int i;
   /* 设置种子 */
   srand( (unsigned)time( NULL ) );
   for ( i = 0; i < 10; ++i)
   {
      r[i] = rand();
      printf("%d\n", r[i] );
   }
   return r;
}

/* 要调用上面定义函数的主函数 */
int main ()
{
   /* 一个指向整数的指针 */
   int *p;
   int i;
   p = getRandom();
   for ( i = 0; i < 10; i++ )
   {
       printf("*(p + [%d]) : %d\n", i, *(p + i) );
   }
   return 0;
}

//它会产生下列结果：
1523198053
1187214107
1108300978
430494959
1421301276
930971084
123250484
106932140
1604461820
149169022
*(p + [0]) : 1523198053
*(p + [1]) : 1187214107
*(p + [2]) : 1108300978
*(p + [3]) : 430494959
*(p + [4]) : 1421301276
*(p + [5]) : 930971084
*(p + [6]) : 123250484
*(p + [7]) : 106932140
*(p + [8]) : 1604461820
*(p + [9]) : 149169022
```