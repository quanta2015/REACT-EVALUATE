title: C 函数
author:
  name: LI YANG
  url: http://mooc1.chaoxing.com/course/88110757.html
output: 07-C-function.html

# C 指针与数组
## Pointer and Array

--

### C 指向数组的指针

数组名是一个指向数组中第一个元素的常量指针。因此，在下面的声明中：
```c
double balance[50];
```
`balance` 是一个指向 `&balance[0]` 的指针，即数组 `balance` 的第一个元素的地址。因此，下面的程序片段把` p `赋值为 `balance` 的第一个元素的地址：
```c
double *p;
double balance[10];

p = balance;
```
使用数组名作为常量指针是合法的，反之亦然。因此，`*(balance + 4) `是一种访问 `balance[4]` 数据的合法方式。 一旦您把第一个元素的地址存储在` p `中，您就可以使用` *p `、`*(p+1)`、`*(p+2)` 等来访问数组元素。下面的实例演示了上面讨论到的这些概念：
```c
#include <stdio.h>
int main ()
{
   /* 带有 5 个元素的整型数组 */
   double balance[5] = {1000.0, 2.0, 3.4, 17.0, 50.0};
   double *p;
   int i;
   p = balance;
   /* 输出数组中每个元素的值 */
   printf( "使用指针的数组值\n");
   for ( i = 0; i < 5; i++ )
   {
       printf("*(p + %d) : %f\n",  i, *(p + i) );
   }
   printf( "使用 balance 作为地址的数组值\n");
   for ( i = 0; i < 5; i++ )
   {
       printf("*(balance + %d) : %f\n",  i, *(balance + i) );
   }
   return 0;
}
//它会产生下列结果：
使用指针的数组值
*(p + 0) : 1000.000000
*(p + 1) : 2.000000
*(p + 2) : 3.400000
*(p + 3) : 17.000000
*(p + 4) : 50.000000
使用 balance 作为地址的数组值

*(balance + 0) : 1000.000000
*(balance + 1) : 2.000000
*(balance + 2) : 3.400000
*(balance + 3) : 17.000000
*(balance + 4) : 50.000000
```
在上面的实例中，` p `是一个指向 `double` 型的指针，这意味着它可以存储一个 `double` 类型的变量。一旦我们有了` p `中的地址，` *p `将给出存储在` p `中相应地址的值，正如上面实例中所演示的。

--

### C 指针数组

在我们讲解指针数组的概念之前，先让我们来看一个实例，它用到了一个由 3 个整数组成的数组：
```c
#include <stdio.h>
const int MAX = 3;
int main ()
{
   int  var[] = {10, 100, 200};
   int i;
   for (i = 0; i < MAX; i++)
   {
      printf("Value of var[%d] = %d\n", i, var[i] );
   }
   return 0;
}

//它会产生下列结果：
Value of var[0] = 10
Value of var[1] = 100
Value of var[2] = 200
```

可能有一种情况，我们想要让数组存储指向 `int` 或 `char` 或其他数据类型的指针。下面是一个指向整数的指针数组的声明：
```c
int *ptr[MAX];
```
在这里，把 `ptr` 声明为一个数组，由 `MAX` 个整数指针组成。因此，`ptr` 中的每个元素，都是一个指向 `int` 值的指针。下面的实例用到了三个整数，它们将存储在一个指针数组中，如下所示：
```c
#include <stdio.h>
const int MAX = 3;
int main ()
{
   int  var[] = {10, 100, 200};
   int i, *ptr[MAX];
   for ( i = 0; i < MAX; i++)
   {
      ptr[i] = &var[i]; /* 赋值为整数的地址 */
   }
   for ( i = 0; i < MAX; i++)
   {
      printf("Value of var[%d] = %d\n", i, *ptr[i] );
   }
   return 0;
}

//它会产生下列结果：
Value of var[0] = 10
Value of var[1] = 100
Value of var[2] = 200
```

您也可以用一个指向字符的指针数组来存储一个字符串列表，如下：
```c
#include <stdio.h>
const int MAX = 4;
int main ()
{
   char *names[] = {
                   "Zara Ali",
                   "Hina Ali",
                   "Nuha Ali",
                   "Sara Ali",
   };
   int i = 0;
   for ( i = 0; i < MAX; i++)
   {
      printf("Value of names[%d] = %s\n", i, names[i] );
   }
   return 0;
}

//它会产生下列结果：
Value of names[0] = Zara Ali
Value of names[1] = Hina Ali
Value of names[2] = Nuha Ali
Value of names[3] = Sara Ali
```
--

### C 指向指针的指针

指向指针的指针是一种多级间接寻址的形式，或者说是一个指针链。通常，一个指针包含一个变量的地址。当我们定义一个指向指针的指针时，第一个指针包含了第二个指针的地址，第二个指针指向包含实际值的位置。 
<p><img src="img/c11/001.png" width="414" style="margin: 20px"></p>


一个指向指针的指针变量必须如下声明，即在变量名前放置两个星号。例如，下面声明了一个指向 int 类型指针的指针：
```c
int **var;
```

当一个目标值被一个指针间接指向到另一个指针时，访问这个值需要使用两个星号运算符，如下面实例所示：
```c
#include <stdio.h>
int main ()
{
   int  var;
   int  *ptr;
   int  **pptr;
   var = 3000;
   /* 获取 var 的地址 */
   ptr = &var;
   /* 使用运算符 & 获取 ptr 的地址 */
   pptr = &ptr;
   /* 使用 pptr 获取值 */
   printf("Value of var = %d\n", var );
   printf("Value available at *ptr = %d\n", *ptr );
   printf("Value available at **pptr = %d\n", **pptr);

   return 0;
}

//它会产生下列结果：
Value of var = 3000
Value available at *ptr = 3000
Value available at **pptr = 3000
```