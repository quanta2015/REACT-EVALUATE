title: C 函数
author:
  name: LI YANG
  url: http://mooc1.chaoxing.com/course/88110757.html
output: 07-C-function.html

# C 字符串
## String


--

### C 字符串

在 C 语言中，字符串实际上是使用 `null` 字符` '\0' `终止的一维字符数组。因此，一个以 `null` 结尾的字符串，包含了组成字符串的字符。 下面的声明和初始化创建了一个` "Hello" `字符串。由于在数组的末尾存储了空字符，所以字符数组的大小比单词` "Hello" `的字符数多一个。
```
char greeting[6] = {'H', 'e', 'l', 'l', 'o', '\0'};
```
依据数组初始化规则，您可以把上面的语句写成以下语句：
```
char greeting[] = "Hello";
```
以下是 C/C++ 中定义的字符串的内存表示：
<p><img src="img/c13/001.png" width="560" style="margin: 20px"></p>


--

### C/C++ 中的字符串表示

其实，您不需要把 `null` 字符放在字符串常量的末尾。C 编译器会在初始化数组时，自动把` '\0' `放在字符串的末尾。让我们尝试输出上面的字符串：
```c
#include <stdio.h>
int main ()
{
   char greeting[6] = {'H', 'e', 'l', 'l', 'o', '\0'};
   printf("Greeting message: %s\n", greeting );
   return 0;
}

//它会产生下列结果：
Greeting message: Hello
```

C 中有大量操作字符串的函数：

| 序号 函数 & 目的 |  |
|------------------|-----------------------------------------------------------------------------|
| 1 | strcpy(s1, s2);复制字符串 s2 到字符串 s1。 |
| 2 | strcat(s1, s2);连接字符串 s2 到字符串 s1 的末尾。 |
| 3 | strlen(s1);返回字符串 s1 的长度。 |
| 4 | strcmp(s1, s2);如果 s1 和 s2 是相同的，则返回 0；如果 s1s2 则返回大于 0。 |
| 5 | strchr(s1, ch);返回一个指针，指向字符串 s1 中字符 ch 的第一次出现的位置。 |
| 6 | strstr(s1, s2);返回一个指针，指向字符串 s1 中字符串 s2 的第一次出现的位置。 |

下面的实例使用了上述的一些函数：
```c
#include <stdio.h>
#include <string.h>
int main ()
{
   char str1[12] = "Hello";
   char str2[12] = "World";
   char str3[12];
   int  len ;
   /* 复制 str1 到 str3 */
   strcpy(str3, str1);
   printf("strcpy( str3, str1) :  %s\n", str3 );
   /* 连接 str1 和 str2 */
   strcat( str1, str2);
   printf("strcat( str1, str2):   %s\n", str1 );
   /* 连接后，str1 的总长度 */
   len = strlen(str1);
   printf("strlen(str1) :  %d\n", len );
   return 0;
}

//它会产生下列结果：
strcpy( str3, str1) :  Hello
strcat( str1, str2):   HelloWorld
strlen(str1) :  10
```
您可以在 C 标准库中找到更多字符串相关的函数。

### strlen函数
```
int strlen(char *str) {
   if(str==NULL) return 0;
　int len = 0;
   for(; *str!= '\0'; ) {
　　len++;
      str++;
   }
   return len;
}
```

### strcpy函数
```
void  copy(char   to[], char  from[])
{
            int   i  =  0;
            // while loop  will  not   end   if from  isn't '\0'  terminated
            while((to[i]   =  from[i]) != '\0') {
                        ++i;
            }
}
```


```
char *strcpy(char *from, char *to)
{
    if ( from == NULL || to == NULL)
        return NULL ;

        from_len = strlen(from);
        to_len = strlen(to);

      int max = from_len  > to_len  - 1 ? to_len  - 1 : from_len;

        //  to_len  must  have  at  least 1 byte
        if(from_len < 0 ||  to_len  <=  0)  return  -1;
        
        for(i = 0;  i < max;  i++)  {
                to[i] = from[i];
        }
        to[to_len - 1]  = '\0';
        return  i;
}
```

### strcat 函数 
```
char *strcat(char *from, char *to)  
{  
    if((from==NULL)||(to==NULL)) {
       return NULL;
    };  
    char *pt = to;  
    while(*to!='\0') to++;  
    while(*from!='\0') *to++ = *from++;  
    *to = '\0';  
    return pt;  
}  
```

### strcmp 函数
```
int strcmp(const char *to, const char *from)  
{  
   assert((NULL != to) && (NULL != to));  
   if((from==NULL)||(to==NULL)) {
       return NULL;
    };  

   while (*to && *from && (*to == *from))   {  
      to ++;  
      from ++;  
   }  
   return *to - *from;  
   /*如果to > from,则返回值大于0，如果to = from,则返回值等于0，如果to  < from ,则返回值小于0。*/  
}  
```


### 课堂练习
1 . 编写函数isEmail判断字符串是否为一个有效email地址，其声明如下：
int isEmail(char *str)
返回值：如果email地址有效返回1,；如果无效返回0。

2 . 编写函数removeSame删除字符串中的重复字符，其声明如下：
int removeSame(char *str)
返回值：删除重复字符的数量；

3 . 编写字符串的格式化程序，实现字符串的重新排序，其要求如下：
void formatStr(char * str)  

- 输入字符串格式 XXYYZZ  
- 输出字符串格式 XYZXYZ  

4 . 编写扑克出牌规则函数 isPoker，判断出牌是否符合规则，其要求如下：
int isPokerVaild(char * str)

- 符合要求的牌型有1张，一对（2张牌相同），三条（3张牌相同），炸弹（4张牌相同），顺子（5张牌以上连续）  
- 函数返回值为牌型  
